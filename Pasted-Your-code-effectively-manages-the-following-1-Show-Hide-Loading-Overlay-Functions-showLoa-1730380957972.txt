Your code effectively manages the following:

1. **Show/Hide Loading Overlay**: Functions `showLoading()` and `hideLoading()` control the visibility of a loading overlay by toggling the `d-none` class.
   
2. **Form Validation**:
   - The script uses Bootstrapâ€™s validation classes (`was-validated`) to add validation styling to forms with the class `needs-validation`.
   - It prevents form submission if validation fails by calling `event.preventDefault()` and `event.stopPropagation()`.

3. **Loading State on Submit Buttons**:
   - Adds a loading state to submit buttons that include the attribute `data-loading-text`.
   - When a form is submitted, if valid, it disables the button, shows a spinner, and changes the button text to indicate a loading state.

4. **Tooltip Initialization**:
   - Initializes Bootstrap tooltips for any elements with the attribute `data-bs-toggle="tooltip"`.

### Suggestions for Improvement
1. **Error Handling for Loading Overlay**:
   - Consider adding error handling in case `loading-overlay` is not found, which would make the script more robust:
     ```javascript
     function showLoading() {
         const overlay = document.getElementById('loading-overlay');
         if (overlay) overlay.classList.remove('d-none');
     }

     function hideLoading() {
         const overlay = document.getElementById('loading-overlay');
         if (overlay) overlay.classList.add('d-none');
     }
     ```

2. **Debounce Form Submission for Additional Safety**:
   - Add debounce to prevent multiple rapid form submissions in case of accidental double clicks.

3. **Fallback for Non-Bootstrap Tooltips**:
   - If Bootstrap tooltips are essential, ensure Bootstrap JavaScript is loaded before this script to avoid errors.

These minor adjustments can enhance the resilience of your code and provide a smoother user experience, especially for larger forms or when network latency causes delays. This setup is strong for a responsive interface that prioritizes user feedback during interactions. Let me know if you need further refinements!